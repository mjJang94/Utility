import android.app.Activity
import android.content.Context
import android.content.pm.PackageManager
import android.content.res.Configuration
import android.graphics.Color
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build
import android.text.Html
import android.text.Spannable
import android.text.SpannableString
import android.text.TextUtils
import android.text.style.ForegroundColorSpan
import android.util.TypedValue
import android.view.Gravity
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.TextView
import com.google.android.material.snackbar.Snackbar
import com.google.gson.Gson
import org.json.JSONObject
import java.io.PrintWriter
import java.io.StringWriter
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.text.DecimalFormat
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit
import java.util.regex.Pattern
import kotlin.collections.ArrayList
import kotlin.experimental.and
import kotlin.math.abs


open class Util {

    companion object {
        /**
         * 키보드 사출
         */
        open fun showKeyboard(context: Context) {
            val imm = context.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager?
            imm!!.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0)
        }

        /**
         * 키보드 숨기기
         */
        open fun hideKeyBoard(context: Context, view: View) {
            val imm: InputMethodManager =
                context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager

            imm.hideSoftInputFromWindow(view.windowToken, 0)
        }

        /**
         * 인증번호 검증식
         */
        open fun verificationCertification(value: String): Boolean {
            var result = true

            if (!Pattern.matches("([0-9]{6})", value)) {
                result = false
            }

            return result
        }

        /**
         * 재설정 비밀번호 검증식
         */
        open fun verificationNewPassword(value: String): Boolean {
            var result = true

            if (!Pattern.matches("^(?!(?:[0-9]+)\$)([a-zA-Z]|[0-9a-zA-Z]){6,14}\$", value)) {
                result = false
            }

            return result
        }

        /**
         * 재설정 비밀번호 확인 검증식
         */
        open fun verificationNewPasswordCheck(valueA: String, valueB: String): Boolean {
            var result = true

            if (TextUtils.isEmpty(valueA) or TextUtils.isEmpty(valueB)) {
                result = false
            } else {
                if (valueA != valueB) {
                    result = false
                }
            }
            return result
        }

        /**
         * 휴대폰 형식 표현
         */
        open fun verificationPhoneNum(value: String): Boolean {

            val regEx = "(\\d{3})(\\d{4})(\\d{4})"

            var tmpStr = value.replace(" ", "")

            if (!Pattern.matches(regEx, tmpStr)) {
                return false
            }
            return true
        }

        /**
         * 이메일 검증식
         */
        open fun verificationEmail(email: String): Boolean {

            var result = true

            if (!Pattern.matches(
                    "^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}\$",
                    email
                )
            ) {
                result = false
            }

            return result
        }

        /**
         * short 스낵바
         */
        open fun showShortSnackBar(view: View, message: String, callback: Snackbar.Callback?) {

            val snackbar = Snackbar.make(view, message, Snackbar.LENGTH_SHORT)
            val layout = snackbar.view
            layout.setBackgroundColor(Color.parseColor("#e630d679"))

            val textView =
                snackbar.view.findViewById(com.google.android.material.R.id.snackbar_text) as TextView
            textView.setTextColor(Color.parseColor("#ffffff"))
            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14F)

            snackbar.show()
            if (callback != null)
                snackbar.addCallback(callback)
        }

        /**
         * center short 스낵바
         */
        open fun showCenterShortSnackBar(
            view: View,
            message: String,
            callback: Snackbar.Callback?
        ) {

            val snackbar = Snackbar.make(view, message, Snackbar.LENGTH_SHORT)
            val layout = snackbar.view
            layout.setBackgroundColor(Color.parseColor("#e630d679"))

            val textView =
                snackbar.view.findViewById(com.google.android.material.R.id.snackbar_text) as TextView
            textView.setTextColor(Color.parseColor("#ffffff"))
            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14F)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                textView.textAlignment = View.TEXT_ALIGNMENT_CENTER
            } else {
                textView.gravity = Gravity.CENTER_HORIZONTAL
            }

            snackbar.show()
            if (callback != null)
                snackbar.addCallback(callback)
        }

        /**
         * long 스낵바
         */
        open fun showLongSnackBar(view: View, message: String) {
            val snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG)
            val layout = snackbar.view
            layout.setBackgroundColor(Color.parseColor("#00FF8B"))
            snackbar.setAction("Χ") {
                snackbar.dismiss()
            }

            val textView =
                snackbar.view.findViewById(com.google.android.material.R.id.snackbar_text) as TextView
            textView.setTextColor(Color.parseColor("#000000"))
            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15F)

            snackbar.show()
        }

        //notificaiton list 화면에서 사용
        //1시간안의 내용이면 조금 전
        fun dateStrFromDate(timeMil: Long?): String? {
            var date = Date()
            date.time = timeMil!!
            var before10Min = Calendar.getInstance()
            before10Min.time = Date()
            before10Min.add(Calendar.MINUTE, -10)
            if (date.before(before10Min.time)) {
                val formatter = SimpleDateFormat("MM월dd일 HH시mm분")
                return formatter.format(date)
            } else {
                return "방금"
            }
        }

        fun getTodayKr(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.DATE, -1)
            result = get1dayStrKr(cal.time)
            return result
        }

        //**********************  MM월 dd일 형식 반환
        fun getToday(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStr(cal.time) + getDaysStr(cal.get(Calendar.DAY_OF_WEEK))
            return result
        }

        fun getToday_yyyy_MM_dd_HH_mm(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStrYYYY_MM_DD_HH_mm(cal.time)
            return result
        }

        fun getToday_yyyyMMdd(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStrYYYYMMDD(cal.time)
            return result
        }


        fun getYesterday(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.DATE, -1)
            result = get1dayStr(cal.time) + getDaysStr(cal.get(Calendar.DAY_OF_WEEK))
            return result
        }


        //**********************  yyyy-MM-dd 형식 반환

        fun getTodayForSearchOption(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStrYYYY_MM_DD(cal.time)
            return result
        }

        fun getYesterdayForSearchOption(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.DATE, -1)
            result = get1dayStrYYYY_MM_DD(cal.time)
            return result
        }


        fun getRecent7Day(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStr(cal.time)
            //오늘 포함이라 -6
            cal.add(Calendar.DATE, -6)
            result = get1dayStr(cal.time) + " - " + result
            return result
        }

        fun getThisWeek(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStr(cal.time)
            cal.set(Calendar.DAY_OF_WEEK, 1)
            result = get1dayStr(cal.time) + " - " + result
            return result
        }

        fun getYear(): String {

            val instance = Calendar.getInstance()

            return instance.get(Calendar.YEAR).toString()
        }

        fun getMonth(): String {

            val instance = Calendar.getInstance()

            return (instance.get(Calendar.MONTH) + 1).toString()
        }

        fun getLastWeek(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.WEEK_OF_YEAR, -1)
            cal.set(Calendar.DAY_OF_WEEK, cal.getActualMinimum(Calendar.DAY_OF_WEEK))
            result = get1dayStr(cal.time)
            cal.set(Calendar.DAY_OF_WEEK, cal.getActualMaximum(Calendar.DAY_OF_WEEK))
            result += " - "
            result += get1dayStr(cal.time)
            return result
        }


        fun getRecent30Day(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStr(cal.time)
            //오늘 포함이라 -6
            cal.add(Calendar.DATE, -29)
            result = get1dayStr(cal.time) + " - " + result
            return result
        }

        fun getDay(count: Long): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.DATE, (count.toInt()))
            result = get1dayStrKr(cal.time)
            return result
        }

        fun getRecent30Days(startDate: String, endDate: String): ArrayList<String> {

            val max = getValueRegistDateAndToday_yyyyMMdd(startDate, endDate)
            var min = 0

            //15시가 지난 이후로는 max 값이 30이 아닌 29로 나온다
            if (max == 29.toLong()) {
                min = 1
            }

            val tmpArr = ArrayList<String>()

            for (tmpCounter in min..max) {
                tmpArr.add(getDay(tmpCounter))
            }

            return tmpArr
        }

        fun getThisMonth(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStr(cal.time)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            result = get1dayStr(cal.time) + " - " + result
            return result
        }

        fun getThisMonthYYYY_MM_DD(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStrYYYY_MM_DD(cal.time)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            result = get1dayStrYYYY_MM_DD(cal.time) + ";" + result
            return result
        }

        fun getThisMonthYYYYMMDD(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            result = get1dayStrYYYYMMDD(cal.time)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            result = get1dayStrYYYYMMDD(cal.time) + ";" + result
            return result
        }


        fun getLastMonth(): String {
            var result = ""
            val cal = Calendar.getInstance()
            cal.time = Date()
            cal.add(Calendar.MONTH, -1)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            result = get1dayStr(cal.time)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH))
            result += " - "
            result += get1dayStr(cal.time)
            return result
        }

        fun get1dayStr(date: Date): String {
            val formatter = SimpleDateFormat("MM월 dd일")
            val result = formatter.format(date)
            return result
        }

        fun get1dayStrKr(date: Date): String {
            val formatter = SimpleDateFormat("yyyy년 MM월 dd일")
            val result = formatter.format(date)
            return result
        }

        fun get1dayStrYYYYMMDD(date: Date): String {
            val formatter = SimpleDateFormat("yyyyMMdd")
            val result = formatter.format(date)
            return result
        }

        fun get1dayStrYYYY_MM_DD(date: Date): String {
            val formatter = SimpleDateFormat("yyyy-MM-dd")
            val result = formatter.format(date)
            return result
        }

        fun get1dayStrYYYY_MM_DD_HH_mm(date: Date): String {
            val formatter = SimpleDateFormat("yyyy-MM-dd HH:mm")
            val result = formatter.format(date)
            return result
        }


        fun getDaysStr(dayOfWeekByNum: Int): String {
            var day = ""
            when (dayOfWeekByNum) {
                1 ->
                    day = "일"
                2 ->
                    day = "월"
                3 ->
                    day = "화"
                4 ->
                    day = "수"
                5 ->
                    day = "목"
                6 ->
                    day = "금"
                7 ->
                    day = "토"
            }
            return day + "요일"
        }


        fun changeSomeText(content: String, startIndex: Int, endIndex: Int): SpannableString {

            val span = SpannableString(content)
            span.setSpan(
                ForegroundColorSpan(Color.parseColor("#13ce66")),
                startIndex,
                endIndex,
                Spannable.SPAN_EXCLUSIVE_INCLUSIVE
            )

            return span
        }

        fun jsonObjectToObject(response: JSONObject, classOfT: Class<*>): Any {

            return Gson().fromJson(response.toString(), classOfT)
        }

        fun dateReserveValidate(time: Int): Boolean {

            val date = Date(System.currentTimeMillis())
            val simpleDate = SimpleDateFormat("HHmm")
            val now = simpleDate.format(date).toInt()

            if ((time - now) > 60) {
                return false
            }

            return true
        }

        fun getNumberWithComma(strNumber: String?): String {
            var result = "0"

            if (strNumber != null && strNumber.isNotEmpty()) {
                try {
                    val num = strNumber.toLong()
                    val dec = DecimalFormat("#,###")
                    result = dec.format(num)
                } catch (e: Exception) {
                    result = "0"
                }
            } else {
                result = "0"
            }

            return result
        }

        fun getKRMoney(context: Context, strNumber: String?): String {
            var result = "0"
            result = getNumberWithComma(strNumber) + "원"
            return result
        }

        fun removeComma(strFormateValue: String?): String? {
            var tmp = "0"

            tmp = strFormateValue!!.replace(",", "")

            return tmp
        }

        fun removeCommaWithWon(strFormateValue: String?): String? {
            var tmp = "0"

            tmp = strFormateValue!!.replace(",", "").replace("원", "")

            return tmp
        }

        fun getPxFromDp(dp: Int, activity: Activity): Int {
            return TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP,
                dp.toFloat(),
                activity.resources.displayMetrics
            ).toInt()
        }

        /**
         * yyyy-mm-dd를 5월 23일 ・ 토요일
         *
         * @param day
         * @return
         */
        fun yyyymmddToMMDD_day(day: String?): String {
            var result = ""

            val parser = SimpleDateFormat("yyyyMMdd")
            val date = parser.parse(day)
            val cal = Calendar.getInstance()
            cal.time = date
            result = get1dayStr(date) + " ・ " + getDaysStr(cal.get(Calendar.DAY_OF_WEEK))
            return result
        }

        /**
         * textview의 칼라를 바꿈
         * 버젼별로 상이한 내용을 적용하기 위함
         *
         * @param txtView
         * @param textColorForBillStateComplete
         */
        fun setTextColor(activity: Activity?, txtView: TextView?, textColor: Int) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                txtView?.setTextColor(
                    activity!!.getColor(
                        textColor
                    )
                )
            } else {
                txtView?.setTextColor(
                    activity?.resources!!.getColor(
                        textColor
                    )
                )
            }
        }

        fun getDateFromStr(str: String?): Date {
            var result = Date()
            val parser = SimpleDateFormat("yyyy-MM-dd")
            result = parser.parse(str)
            return result
        }

        fun getStrDateFromStr(str: String?): Date {
            val parser = SimpleDateFormat("yyyyMMdd")
            var result = parser.parse(str)
            return result
        }

        fun getStrDateFromStrToFormat(str: String?): Date {
            val parser = SimpleDateFormat("yyyy-MM-dd HH:mm")
            var result = parser.parse(str)
            return result
        }

        fun getStrFromDate(date: Date?): String {

            val format = SimpleDateFormat("yyyy-MM-dd HH:mm")

            return format.format(date)
        }

        //time stamp -> str
        fun getDateTimeFromTimeStampWithKorean(s: String): String? {
            try {
                val sdf = SimpleDateFormat("yyyy년 MM월 dd일 a h시", Locale.KOREA)
                val netDate = Date(s.toLong())
                return sdf.format(netDate)
            } catch (e: Exception) {
                return e.toString()
            }
        }

        //time stamp -> str
        fun getDateTimeFromTimeStamp(s: String): String? {
            try {
                val sdf = SimpleDateFormat("yyyy.MM.dd HH:mm:ss", Locale.KOREA)
                val netDate = Date(s.toLong())
                return sdf.format(netDate)
            } catch (e: Exception) {
                return e.toString()
            }
        }

        fun overTodayLimit(currentTime: String, targetTime: String): Boolean {

            val currentDate = getStrDateFromStrToFormat(currentTime)
            val targetDate = getStrDateFromStrToFormat(targetTime)

            return currentDate > targetDate
        }

        /**
         * 시간 차이 구하기 yyyy-MM-dd HH:mm
         */
        fun getValueTimeIntervalValidate(currentTime: String, targetTime: String): Boolean {

            var validate = false

            val currentDate = getStrDateFromStrToFormat(currentTime)
            val targetDate = getStrDateFromStrToFormat(targetTime)

            val calDate = targetDate.time - currentDate.time

            val intervalTime = calDate / (60 * 1000)

            //예약 신청 시간이 1시간 이하로 남았을 때
            validate = intervalTime > 60

            if (intervalTime > 60) {
                validate = true
            }

            return validate
        }

        /**
         * 두 날짜간 차이 구하기 yyyyMMdd
         */
        fun getValueRegistDateAndToday_yyyyMMdd(todayDate: String, registDate: String): Long {

            val fromDate = getStrDateFromStr(todayDate)
            val toDate = getStrDateFromStr(registDate)

            val calDate = fromDate.time - toDate.time

            val intervalDate = calDate / (24 * 60 * 60 * 1000)

            return abs(intervalDate)
        }

        /**
         * 두 날짜간 차이 구하기 yyyy-MM-dd
         */
        fun getValueRegistDateAndToday_yyyy_MM_dd(todayDate: String, registDate: String): Long {

            val fromDate = getDateFromStr(todayDate)
            val toDate = getDateFromStr(registDate)

            val calDate = fromDate.time - toDate.time

            val intervalDate = calDate / (24 * 60 * 60 * 1000)

            return abs(intervalDate)
        }

        fun replaceDateFormatToLong(str: String): Long {

            return str.replace("-", "").replace(":", "").replace(" ", "").toLong()
        }

        fun getDateFormatByKoreanFromStr(str: String?): Date {
            var result = Date()
            val parser = SimpleDateFormat("MM월 dd일", Locale.KOREAN)
            result = parser.parse(str)
            return result
        }

        //이번달 첫째날
        fun getFirstDayOnThisMonth(): Date {
            val cal = Calendar.getInstance()
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            return cal.time
        }

        //이번주 첫째날
        fun getFirstDayOnThisWeek(): Date {
            val cal = Calendar.getInstance()
            cal.set(Calendar.DAY_OF_WEEK, cal.getActualMinimum(Calendar.DAY_OF_WEEK))
            return cal.time
        }

        fun getBefore7Day(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.DATE, -6)
            return cal.time
        }

        fun getFirstDayOnLastWeek(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.WEEK_OF_YEAR, -1)
            cal.set(Calendar.DAY_OF_WEEK, cal.getActualMinimum(Calendar.DAY_OF_WEEK))
            return cal.time
        }

        fun getLastDayOnLastWeek(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.WEEK_OF_YEAR, -1)
            cal.set(Calendar.DAY_OF_WEEK, cal.getActualMaximum(Calendar.DAY_OF_WEEK))
            return cal.time
        }

        fun getBefore30Day(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.DATE, -29)
            return cal.time
        }

        fun getFirstDayOnLastMonth(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.MONTH, -1)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH))
            return cal.time
        }

        fun getLastDayOnLastMonth(): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.MONTH, -1)
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH))
            return cal.time
        }

        //두 날짜 간격을 계산해서 일 단위로 반환 한다.
        fun getInterval(startDate: Date, endDate: Date): Int {
            val result =
                TimeUnit.DAYS.convert(endDate.time - startDate.time, TimeUnit.MILLISECONDS).toInt()
            return result
        }

        fun getDestructionDate(value: Int): Date {
            val cal = Calendar.getInstance()
            cal.add(Calendar.DATE, value)
            return cal.time
        }

        fun setHtmlToTextView(html: String, txtView: TextView?) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                txtView?.text = Html.fromHtml(html, Html.FROM_HTML_MODE_LEGACY)
            } else {
                txtView?.text = Html.fromHtml(html)
            }
        }

        //yyyy-MM-dd to Date
        fun getDateFromYYYY_MM_DD(yyyymmdd: String?): Date? {
            val parser = SimpleDateFormat("yyyy-MM-dd")
            val result = parser.parse(yyyymmdd)
            return result
        }

        // long to str 날짜
        fun getDateFromLong(timeMil: Long?): String {
            var result = ""
            var date = Date()
            if (timeMil != null)
                date.time = timeMil
            else
                date.time = 0

            val formatter = SimpleDateFormat("MM월dd일")
            result = formatter.format(date)
            return result
        }

        //yyyy.MM.dd HH.mm.ss -> yyyy년 MM월 dd일
        fun getDateFormKorean(strDate: String): String {
            val tokenizer = StringTokenizer(strDate)
            val date = SimpleDateFormat("yyyy-MM-dd").parse(tokenizer.nextToken())
            val result = SimpleDateFormat("yyyy년 MM월 dd일").format(date)

            return result;
        }

        fun getDateFormKoreanFullData(strDate: String): String {
            val date = SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(strDate)
            val result = SimpleDateFormat("yyyy년 MM월 dd일 a hh:mm").format(date)

            return result;
        }

        //태블릿 인지 확인
        fun isTablet(context: Context): Boolean {
            return ((context.resources.configuration.screenLayout
                    and Configuration.SCREENLAYOUT_SIZE_MASK)
                    >= Configuration.SCREENLAYOUT_SIZE_LARGE)
        }


        //네트워크 연결 상태 확인
        fun isNetworkConnected(context: Context): Boolean {
            val cm: ConnectivityManager =
                context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
            if (cm != null) {
                if (Build.VERSION.SDK_INT < 23) {
                    val ni = cm.activeNetworkInfo

                    if (ni != null) {
                        return (ni.isConnected && (ni.type == ConnectivityManager.TYPE_WIFI || ni.type == ConnectivityManager.TYPE_MOBILE))
                    }
                } else {
                    val n = cm.activeNetwork

                    if (n != null) {
                        val nc = cm.getNetworkCapabilities(n)

                        return (nc!!.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) || nc.hasTransport(
                            NetworkCapabilities.TRANSPORT_WIFI
                        ))
                    }
                }
            }

            return false
        }

        //할부 개월수
        fun getInstallmentStr(approvalMonthly: String): CharSequence? {
            var result = "일시불"

            try {
                var monthly = approvalMonthly.toInt()

                if (monthly != 0) {
                    result = monthly.toString() + "개월"
                }
            } catch (err: java.lang.Exception) {
                result = "일시불"
            }
            return result
        }

        //exception string 으로 변환
        fun exceptionToString(e: Exception): String {

            val writer = StringWriter()
            e.printStackTrace(PrintWriter(writer))
            return writer.toString()
        }


        //특정 앱 설치 유무
        fun isInstallApp(context: Context, pkgName: String): Boolean {
            context.packageManager.getLaunchIntentForPackage(pkgName) ?: return false

            return true
        }

        //발송톡관리 충전내역 상태값
        fun chargeStateConverter(state: String): String {

            var tmp = ""

            when (state) {
                "H" -> {
                    tmp = "입금대기"
                }

                "F", "M" -> {
                    tmp = "충전완료"
                }

                "C" -> {
                    tmp = "환불완료"
                }

                else -> {
                    tmp = ""
                }
            }

            return tmp
        }

        //발송톡관리 충전내역 상태값 색 변경
        fun chargeStateColor(state: String): Int {
            var color = 0

            when (state) {
                "H" -> {
                    color = Color.parseColor("#ff4949")
                }

                "F", "M" -> {
                    color = Color.parseColor("#1a1a1a")
                }

                "C" -> {
                    color = Color.parseColor("#999999")
                }
                else -> {
                    color = Color.parseColor("#1a1a1a")
                }
            }

            return color;
        }

        /*
        패키지가 설치 되어있는지 확인
        * */
        fun isPackageInstalled(applicationContext: Context, packageName: String): Boolean {
            val pm = applicationContext.packageManager
            var mVersion: String? = null
            try {
                mVersion = pm.getPackageInfo(packageName, 0).versionName;
                if (mVersion.equals(null)) {
                    return false;
                }
            } catch (e: PackageManager.NameNotFoundException) {
                return false;
            }
            return true;
        }

        //디바이스 모델 얻기
        fun getModelName(): String? {
            return Build.MODEL
        }

        //해쉬값 얻기
        fun getSHA256(str: String): String? {
            var SHA: String? = ""
            SHA = try {
                val sh = MessageDigest.getInstance("SHA-256")
                sh.update(str.toByteArray())
                val byteData = sh.digest()
                val sb = StringBuffer()
                for (i in byteData.indices) {
                    sb.append(Integer.toString((byteData[i] and 0xff.toByte()) + 0x100, 16).substring(1))
                }
                sb.toString()
            } catch (e: NoSuchAlgorithmException) {
                e.printStackTrace()
                null
            }
            return SHA
        }


        fun isValidPhoneNumOfPinNum(pinNum: String): Boolean {

            if (pinNum.length >= 3) {

                if (pinNum.substring(0, 3) == "010" && pinNum.length == 11) {
                    return true
                }

                if (pinNum.substring(0, 2) == "01" && pinNum.length == 10) {
                    return true
                }

                if (pinNum.substring(0, 2) != "01" && pinNum.length == 10) {
                    return true
                }

            }
            return false
        }


        fun checkDinersCardType(firstNum: String): Boolean {

            //다이너스
            if (firstNum.startsWith("36") || firstNum.startsWith("38") || firstNum.startsWith("39") || firstNum.startsWith("30")) {
                return true
            }
            return false
        }

        fun checkAmexCardType(firstNum: String): Boolean {

            //아멕스
            if (firstNum.startsWith("34") || firstNum.startsWith("37")) {
                return true
            }
            return false
        }

    }
}
